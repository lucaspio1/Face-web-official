// Google Apps Script - API para Sistema de Reconhecimento Facial
// Cole este c√≥digo no editor do Google Apps Script

const SPREADSHEET_ID = '1xl2wJdaqzIkTA3gjBQws5j6XrOw3AR5RC7_CrDR1M0U'; // Substitua pelo ID da sua planilha

function doPost(e) {
  try {
    console.log('üì• Recebendo request:', e.postData.contents);
    
    const data = JSON.parse(e.postData.contents);
    const action = data.action;
    
    console.log('üéØ A√ß√£o solicitada:', action);
    
    switch (action) {
      case 'addPerson':
        console.log('‚û°Ô∏è Executando addPerson');
        return addPerson(data);
        
      case 'updatePerson':
        console.log('‚û°Ô∏è Executando updatePerson');
        return updatePerson(data);
        
      case 'getAllPeople':
        console.log('‚û°Ô∏è Executando getAllPeople');
        return getAllPeople();
        
      case 'getPersonByCPF':
        console.log('‚û°Ô∏è Executando getPersonByCPF para CPF:', data.cpf);
        return getPersonByCPF(data.cpf);
        
      case 'deletePerson':
        console.log('‚û°Ô∏è Executando deletePerson para ID:', data.personId);
        return deletePerson(data.personId);
        
      case 'getStats':
        console.log('‚û°Ô∏è Executando getStats');
        return getStats();
        
      default:
        console.error('‚ùå A√ß√£o n√£o reconhecida:', action);
        return createResponse(false, 'A√ß√£o n√£o reconhecida: ' + action);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no doPost:', error);
    return createResponse(false, 'Erro interno: ' + error.message);
  }
}

// Fun√ß√£o para requisi√ß√µes GET
function doGet(e) {
  const action = e.parameter.action;
  
  try {
    switch (action) {
      case 'stats':
        return createResponse(true, 'Estat√≠sticas', getStats().data);
      case 'test':
        return createResponse(true, 'Apps Script funcionando!');
      default:
        return createResponse(true, 'API do Sistema de Reconhecimento Facial');
    }
  } catch (error) {
    console.error('Erro no doGet:', error);
    return createResponse(false, 'Erro interno: ' + error.message);
  }
}

// Adicionar pessoa (nova)
function addPerson(data) {
  try {
    console.log('üë§ Adicionando pessoa:', data.nome);
    
    const { cpf, nome, embedding, imageBase64 } = data;
    
    if (!cpf || !nome || !embedding) {
      return createResponse(false, 'Dados obrigat√≥rios faltando');
    }
    
    // Garantir que CPF seja string
    const cpfString = String(cpf);
    
    // Verificar se CPF j√° existe
    const existing = getPersonByCPF(cpfString);
    if (existing.success && existing.data) {
      return createResponse(false, 'CPF j√° cadastrado');
    }
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // Gerar IDs
    const personId = getNextId('Pessoas');
    const embeddingId = getNextId('Embeddings');
    const imageId = getNextId('Imagens');
    const now = new Date().toISOString();
    
    console.log(`üìä IDs gerados: Person=${personId}, Embedding=${embeddingId}, Image=${imageId}`);
    
    // Adicionar pessoa
    const peopleSheet = ss.getSheetByName('Pessoas');
    peopleSheet.appendRow([personId, "'" + cpfString, nome, '', now]);
    console.log('‚úì Pessoa adicionada √† aba Pessoas');
    
    // Adicionar embedding
    const embeddingsSheet = ss.getSheetByName('Embeddings');
    embeddingsSheet.appendRow([embeddingId, personId, JSON.stringify(embedding)]);
    console.log('‚úì Embedding adicionado √† aba Embeddings');
    
    // Adicionar imagem (se fornecida)
    if (imageBase64) {
      const imagesSheet = ss.getSheetByName('Imagens');
      imagesSheet.appendRow([imageId, personId, imageBase64, now]);
      console.log('‚úì Imagem adicionada √† aba Imagens');
    }
    
    console.log(`üéâ ${nome} cadastrado com sucesso! ID: ${personId}`);
    
    return createResponse(true, 'Pessoa cadastrada com sucesso', { 
      personId: personId,
      action: 'created'
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao adicionar pessoa:', error);
    return createResponse(false, 'Erro ao cadastrar: ' + error.message);
  }
}

// Atualizar pessoa existente
function updatePerson(data) {
  try {
    console.log('üîÑ Iniciando updatePerson para:', data.nome);
    
    const { cpf, nome, embedding, imageBase64, personId } = data;
    
    if (!cpf || !nome || !embedding || !personId) {
      console.error('‚ùå Dados faltando:', { cpf: !!cpf, nome: !!nome, embedding: !!embedding, personId: !!personId });
      return createResponse(false, 'Dados obrigat√≥rios faltando para atualiza√ß√£o');
    }
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const now = new Date().toISOString();
    
    console.log('üìä Atualizando pessoa ID:', personId);
    
    // 1. Atualizar dados na aba Pessoas
    const peopleSheet = ss.getSheetByName('Pessoas');
    const peopleData = peopleSheet.getDataRange().getValues();
    
    let pessoaAtualizada = false;
    for (let i = 1; i < peopleData.length; i++) {
      if (peopleData[i][0] == personId) {
        console.log(`üìù Atualizando pessoa na linha ${i + 1}`);
        
        peopleSheet.getRange(i + 1, 2).setValue("'" + cpf);
        peopleSheet.getRange(i + 1, 3).setValue(nome);
        peopleSheet.getRange(i + 1, 5).setValue(now);
        
        pessoaAtualizada = true;
        console.log('‚úÖ Dados da pessoa atualizados');
        break;
      }
    }
    
    if (!pessoaAtualizada) {
      console.error('‚ùå Pessoa n√£o encontrada com ID:', personId);
      return createResponse(false, 'Pessoa n√£o encontrada com ID: ' + personId);
    }
    
    // 2. Atualizar embedding
    const embeddingsSheet = ss.getSheetByName('Embeddings');
    const embeddingsData = embeddingsSheet.getDataRange().getValues();
    
    let embeddingAtualizado = false;
    for (let i = 1; i < embeddingsData.length; i++) {
      if (embeddingsData[i][1] == personId) {
        console.log(`üìù Atualizando embedding na linha ${i + 1}`);
        
        embeddingsSheet.getRange(i + 1, 3).setValue(JSON.stringify(embedding));
        
        embeddingAtualizado = true;
        console.log('‚úÖ Embedding atualizado');
        break;
      }
    }
    
    if (!embeddingAtualizado) {
      console.warn('‚ö†Ô∏è Embedding n√£o encontrado para person_id:', personId);
    }
    
    // 3. Atualizar imagem (se fornecida)
    if (imageBase64) {
      const imagesSheet = ss.getSheetByName('Imagens');
      const imagesData = imagesSheet.getDataRange().getValues();
      
      let imagemAtualizada = false;
      for (let i = 1; i < imagesData.length; i++) {
        if (imagesData[i][1] == personId) {
          console.log(`üìù Atualizando imagem na linha ${i + 1}`);
          
          imagesSheet.getRange(i + 1, 3).setValue(imageBase64);
          imagesSheet.getRange(i + 1, 4).setValue(now);
          
          imagemAtualizada = true;
          console.log('‚úÖ Imagem atualizada');
          break;
        }
      }
      
      if (!imagemAtualizada) {
        console.warn('‚ö†Ô∏è Imagem n√£o encontrada para person_id:', personId);
      }
    }
    
    console.log(`üéâ ${nome} atualizado com sucesso!`);
    
    return createResponse(true, 'Pessoa atualizada com sucesso', { 
      personId: personId,
      action: 'updated'
    });
    
  } catch (error) {
    console.error('‚ùå Erro em updatePerson:', error);
    return createResponse(false, 'Erro ao atualizar: ' + error.message);
  }
}

// Buscar todas as pessoas
function getAllPeople() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // Buscar pessoas
    const peopleSheet = ss.getSheetByName('Pessoas');
    const peopleData = peopleSheet.getDataRange().getValues();
    const peopleHeaders = peopleData[0];
    const peopleRows = peopleData.slice(1);
    
    // Buscar embeddings
    const embeddingsSheet = ss.getSheetByName('Embeddings');
    const embeddingsData = embeddingsSheet.getDataRange().getValues();
    const embeddingsRows = embeddingsData.slice(1);
    
    // Combinar dados
    const people = peopleRows.map(row => {
      const personId = row[0];
      const embeddingRow = embeddingsRows.find(emb => emb[1] == personId);
      
      return {
        id: personId,
        cpf: row[1],
        nome: row[2],
        email: row[3],
        data_cadastro: row[4],
        embedding: embeddingRow ? JSON.parse(embeddingRow[2]) : null
      };
    });
    
    console.log(`${people.length} pessoas encontradas`);
    
    return createResponse(true, 'Pessoas encontradas', people);
    
  } catch (error) {
    console.error('Erro ao buscar pessoas:', error);
    return createResponse(false, 'Erro ao buscar pessoas: ' + error.message);
  }
}

// Buscar pessoa por CPF
function getPersonByCPF(cpf) {
  try {
    console.log('üîç Buscando CPF:', cpf);
    
    const allPeople = getAllPeople();
    
    if (!allPeople.success) {
      return allPeople;
    }
    
    // Buscar pessoa com CPF correspondente
    const person = allPeople.data.find(p => String(p.cpf).replace(/'/g, '') === String(cpf));
    
    if (person) {
      console.log('‚úì Pessoa encontrada:', person.nome);
      return createResponse(true, 'Pessoa encontrada', person); // Retorna o objeto da pessoa
    } else {
      console.log('‚ÑπÔ∏è CPF n√£o encontrado');
      return createResponse(false, 'CPF n√£o encontrado');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar por CPF:', error);
    return createResponse(false, 'Erro ao buscar CPF: ' + error.message);
  }
}

// Deletar pessoa
function deletePerson(personId) {
  try {
    console.log('üóëÔ∏è Deletando pessoa ID:', personId);
    
    if (!personId) {
      return createResponse(false, 'ID da pessoa √© obrigat√≥rio');
    }
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // Deletar da aba Pessoas
    const peopleSheet = ss.getSheetByName('Pessoas');
    const peopleData = peopleSheet.getDataRange().getValues();
    
    for (let i = peopleData.length - 1; i >= 1; i--) { // De tr√°s para frente
      if (peopleData[i][0] == personId) {
        peopleSheet.deleteRow(i + 1);
        console.log('‚úì Pessoa deletada da aba Pessoas');
        break;
      }
    }
    
    // Deletar da aba Embeddings
    const embeddingsSheet = ss.getSheetByName('Embeddings');
    const embeddingsData = embeddingsSheet.getDataRange().getValues();
    
    for (let i = embeddingsData.length - 1; i >= 1; i--) {
      if (embeddingsData[i][1] == personId) {
        embeddingsSheet.deleteRow(i + 1);
        console.log('‚úì Embedding deletado da aba Embeddings');
        break;
      }
    }
    
    // Deletar da aba Imagens
    const imagesSheet = ss.getSheetByName('Imagens');
    const imagesData = imagesSheet.getDataRange().getValues();
    
    for (let i = imagesData.length - 1; i >= 1; i--) {
      if (imagesData[i][1] == personId) {
        imagesSheet.deleteRow(i + 1);
        console.log('‚úì Imagem deletada da aba Imagens');
        break;
      }
    }
    
    console.log(`üéâ Pessoa ID ${personId} deletada com sucesso!`);
    
    return createResponse(true, 'Pessoa deletada com sucesso', { personId });
    
  } catch (error) {
    console.error('‚ùå Erro ao deletar pessoa:', error);
    return createResponse(false, 'Erro ao deletar: ' + error.message);
  }
}

// Obter estat√≠sticas
function getStats() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    const peopleSheet = ss.getSheetByName('Pessoas');
    const embeddingsSheet = ss.getSheetByName('Embeddings');
    const imagesSheet = ss.getSheetByName('Imagens');
    
    const totalPeople = Math.max(0, peopleSheet.getLastRow() - 1);
    const totalEmbeddings = Math.max(0, embeddingsSheet.getLastRow() - 1);
    const totalImages = Math.max(0, imagesSheet.getLastRow() - 1);
    
    const stats = {
      total_persons: totalPeople,
      total_embeddings: totalEmbeddings,
      total_images: totalImages,
      spreadsheet_id: SPREADSHEET_ID,
      last_update: new Date().toISOString()
    };
    
    return createResponse(true, 'Estat√≠sticas', stats);
    
  } catch (error) {
    console.error('Erro ao obter estat√≠sticas:', error);
    return createResponse(false, 'Erro ao obter estat√≠sticas: ' + error.message);
  }
}

// Obter pr√≥ximo ID para uma planilha
function getNextId(sheetName) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(sheetName);
    
    const lastRow = sheet.getLastRow();
    
    if (lastRow <= 1) {
      return 1; // Primeira entrada
    }
    
    // Obter IDs existentes
    const range = sheet.getRange(2, 1, lastRow - 1, 1);
    const values = range.getValues();
    const ids = values.map(row => parseInt(row[0]) || 0);
    const maxId = Math.max(...ids);
    
    return maxId + 1;
    
  } catch (error) {
    console.error('Erro ao obter pr√≥ximo ID:', error);
    return 1;
  }
}

// Criar resposta padronizada
function createResponse(success, message, data = null) {
  const response = {
    success: success,
    message: message,
    timestamp: new Date().toISOString()
  };
  
  if (data !== null) {
    response.data = data;
  }
  
  return ContentService
    .createTextOutput(JSON.stringify(response))
    .setMimeType(ContentService.MimeType.JSON);
}

// Configurar planilha inicial
function setupInitialSheets() {
  try {
    console.log('Configurando planilha inicial...');
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // Configurar aba Pessoas
    let peopleSheet = ss.getSheetByName('Pessoas');
    if (!peopleSheet) {
      peopleSheet = ss.insertSheet('Pessoas');
    }
    peopleSheet.getRange(1, 1, 1, 5).setValues([['ID', 'CPF', 'Nome', 'Email', 'Data_Cadastro']]);
    
    // Configurar aba Embeddings
    let embeddingsSheet = ss.getSheetByName('Embeddings');
    if (!embeddingsSheet) {
      embeddingsSheet = ss.insertSheet('Embeddings');
    }
    embeddingsSheet.getRange(1, 1, 1, 3).setValues([['ID', 'Person_ID', 'Embedding']]);
    
    // Configurar aba Imagens
    let imagesSheet = ss.getSheetByName('Imagens');
    if (!imagesSheet) {
      imagesSheet = ss.insertSheet('Imagens');
    }
    imagesSheet.getRange(1, 1, 1, 4).setValues([['ID', 'Person_ID', 'Image_Base64', 'Data_Upload']]);
    
    console.log('‚úì Planilha configurada com sucesso!');
    
    return createResponse(true, 'Planilha configurada com sucesso');
    
  } catch (error) {
    console.error('Erro ao configurar planilha:', error);
    return createResponse(false, 'Erro ao configurar: ' + error.message);
  }
}

// Fun√ß√£o para testar o Apps Script
function testScript() {
  console.log('Testando Apps Script...');
  
  try {
    // Teste b√°sico
    const stats = getStats();
    console.log('Stats:', stats);
    
    console.log('‚úì Apps Script funcionando!');
    return 'Teste passou!';
    
  } catch (error) {
    console.error('Erro no teste:', error);
    return 'Teste falhou: ' + error.message;
  }
}